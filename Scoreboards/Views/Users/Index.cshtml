@using Microsoft.AspNetCore.Identity

@model Scoreboards.Models.Users.UsersModel

@inject UserManager<Scoreboards.Data.Models.ApplicationUser> _userManager

<script type="text/javascript">
    function goToUser() {

    }
    // TODO: Get page search working without refreshing
    //function getURLParams() {
    //    const urlParams = new URLSearchParams(window.location.search);
    //    return urlParams.get('usrsearch');
    //}
    //$("search").change(function () {
    //    var str = $(this).text() + "";
    //})
</script>

<div class="row page-content user-page row-margin-override">
    <div align="center">
        <h3 style="margin-bottom:40px;">Users</h3>
        <form action="/Users/Index" method="GET">
            <input class="usr-search-bar" id="search" name="usrsearch" type="text"/>
            <input class="usr-search-btn" type="submit" value="Go" />
        </form>
    </div>
    <div class="user-cards" id="userdisplay">
        @{string searchInput = Context.Request.Query["usrsearch"];}
        @if (searchInput != null)
        {
            @foreach (var user in Model.AppUsers.Where(usr => usr.UserName.ToLower().Contains(searchInput.ToLower())))
            {
                string userURL = "/Users/" + user.Id;
                <div class="card" onclick="location.href = '@(Url.Action("Profile", "Users", new { userID = user.Id }))'">
                    <picture class="user-card-picture">
                        <img src="@user.ProfileImageUrl" />
                    </picture>
                    <div>
                        <span title="Admin">
                            @if (await _userManager.IsInRoleAsync(user, "Admin"))
                            {
                                <i class="fa fa-key admin-key"></i>
                            }
                            @user.UserName
                        </span>
                    </div>
                </div>
            }
        }
        else
        {
            @foreach (var user in Model.AppUsers)
            {
                <div class="card" onclick="location.href = '@(Url.Action("Profile", "Users", new { userID = user.Id }))'">
                    <picture class="user-card-picture">
                        <img src="@user.ProfileImageUrl" />
                    </picture>
                    <div>
                        <span title="Admin">
                        @if (await _userManager.IsInRoleAsync(user, "Admin"))
                        {
                            <i class="fa fa-key admin-key"></i>
                        }
                            @user.UserName
                        </span>
                    </div>
                </div>
            }
        }
    </div>
</div>